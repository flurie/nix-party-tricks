#+TITLE: Nix party tricks
#+AUTHOR: Alexander Flurie
#+EMAIL:  _@flurie.net
#+DATE: <2022-07-12 Tue>
#+BEAMER_HEADER: \subtitle{Building EC2s, images, and lambda packages with NixOS}
#+BEAMER_HEADER: \institute{Pittsburgh AWS User Group}
#+DESCRIPTION: Some party tricks you can perform with nix and AWS
#+KEYWORDS: nix aws ec2 terraform
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+startup: beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [bigger]
#+LATEX_COMPILER: tectonic
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+BEAMER_THEME: metropolis
#+latex: \metroset{block=fill}

* Preamble
** Nix is magic
Surprise, this is a magic show!

Nix is a special kind of magic for specifying pretty much any output you could want.
** Nothing up my sleeve...
Behold, a fresh VM.

I am clicking through these things because I am very serious.
** ...but cards on the table
There's always something to install when you start.
** For those playing along at home
This text is expository, written for flavor and background
*** This text highlights an important definition
:PROPERTIES:
:BEAMER_env: alertblock
:END:
Satoshi Nakamoto: last known alias of Charles Ponzi
*** This text is instructional
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
Green means go! Do as I say.
* Demo Overview
** Purpose
- survey of a bunch of common problems and demonstrate solutions with nix
- whirlwind tour of some great nix ecosystem tooling
- code is public: [[https://github.com/flurie/nix-party-tricks]]
** Let's install nix!
*** Installing nix
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
- Go to [[https://nixos.org]]
- select *Download*
- Follow multi-user installation instructions (unless you're on something weird like WSL)
** And let's install some things to make our lives easier (and this demo shorter)
*** Rosetta 2
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
~softwareupdate --install-rosetta~
*** git
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
 ~nix-env -iA nixpkgs.git~
*** cachix
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
 ~nix-env -iA nixpkgs.cachix~
*** add some stuff to ~/etc/nix/nix.conf~
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
   ~experimental-features = nix-command flakes~
   ~trusted-users = root $(whoami)~
*** explicitly add cachix cache
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
 ~cachix use flurie~
* /Extremely/ abbreviated intro to nix
** Nix the First: Language
Main features:
- functional
- dynamic
- lazy
- base language is _tiny_
- Haskell influence (though much divergence since)
** Nix the First: Language (con't)
Quirky type system:
- strings have native multiline support
- URIs
- paths (relative and absolute)
- no advanced objects, everything is a set (map)
- first-class functions
** Nix the Second: Package Manager
nixpkgs
- Fundamental unit: the derivation
- Built with and extends Nix language
- Largest, most active package repository of its kind
- Many smaller ecosystems, especially by language (2nix)
** Nix the Second: Package Manager (con't)
#+CAPTION: The Dirty Secret
[[https://i.redd.it/ohbkwn9ke6q51.png]]
** Nix the Third: Linux Distribution
NixOS
- Built on top of nixpkgs and systemd
- Familiar to users of gentoo and arch
- Adds in modules for system-level configurability
** Nix the Fourth: /misc/ tooling
*** Tools worth knowing
:PROPERTIES:
:BEAMER_env: alertblock
:END:
- home-manager: nix for ~$HOME~
- nix-darwin: nix for macOS
- cachix: arbitrary caching for nix derivations
- Hercules CI: CI/CD for nix derivations
* First party trick: nix for managing development environments
** Misc tools for environment management
*** Tools we will use in this section
:PROPERTIES:
:BEAMER_env: alertblock
:END:
- direnv: automate environment switching in shell
- devshell: manage all your development tools per-project with a simple configuration file
** Let's install direnv!
*** Installing direnv
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
- Go to [[https://direnv.net/#basic-installation]]
- Follow the NixOS instructions (because I'm not installing Homebrew, boo!) for non-NixOS systems
- Hook direnv into shell
** Let's grab the code...
*** Clone me on GitHub
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
git clone
https://github.com/flurie/nix-party-tricks.git
#+end_src
** ...and then let the magic take hold
direnv holds a *lot* of power, so be careful with what you allow.

Using nix with direnv provides an additional level of security.

*** Time to take the ride.
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
direnv allow
#+end_src
** Tour our new powers
#+ATTR_LaTeX: :width 6cm
#+CAPTION: I'm in devshell! I'm in normal shell!
https://i.redd.it/sjxozjxz2j681.jpg
** A note about creds
*** Be safe
:PROPERTIES:
:BEAMER_env: alertblock
:END:
- *Never* store credentials in a long-lived plaintext config file!
- use ~credential_process~ to grab creds safely
#+begin_example
# ~/.aws/credentials

[default]
credential_process = access_keys_from_csv
#+end_example
** Enter AWS with train
*** Set the stage for more magic
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
cp -r "$PRJ_ROOT"/support/.aws ~/.aws
#+end_src
*** You can try this at home, but don't leave the files sitting around.
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_example
Log in to AWS console

Create new programmatic IAM credentials

Download the csv to our devshell root
#+end_example
** Time to test the thing out
*** Putting it all together
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
aws sts get-caller-identity
#+end_src
* Second party trick: nix for managing ec2s
** Preamble
*** terraform to stand up the host
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
cd $PRJ_ROOT/terraform/ec2
terraform init
terraform apply
#+end_src
** Misc tools for deployment management
*** Tools we will use in this section
:PROPERTIES:
:BEAMER_env: alertblock
:END:
- cachix: arbitrary caching for nix derivations
- deploy-rs: deploy NixOS to anywhere from anywhere
- nixos-generators: generate NixOS machine images of any kind
** NixOS on AWS three ways
#1: ec2 user data
** NixOS on AWS three ways - #1
#+latex: \tiny
#+begin_src terraform
# main.tf
resource "aws_instance" "nixos" {

  # ...some parts omitted

  root_block_device {
    # need this to be big enough to build things
    volume_size = 20
  }

  user_data = <<END
### https://nixos.org/channels/nixos-22.05 nixos

{ config, pkgs, modulesPath, ... }:
{
  # nix uses same string interpolation as terraform, so we must escape it here
  imports = [ "$${modulesPath}/virtualisation/amazon-image.nix" ];
  ec2.hvm = true;
  system.stateVersion = "22.05";
  environment.systemPackages = with pkgs; [ nix-direnv direnv git ];
  networking.hostName = "nixos-aws";
}
END
}
#+end_src
** NixOS on AWS three ways - #1
We can now enter the machine.
*** TODO terraform output into ssh config file + hosts file line?
*** Make sure to use the IP given by terraform.
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
ssh -i /tmp/nixos-ssh.pem root@{IP}
#+end_src
** NixOS on AWS three ways - #1
*** Let's pull down the party tricks repo here as well...
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
git clone
https://github.com/flurie/nix-party-tricks.git
#+end_src
** NixOS on AWS three ways - #1
*** ...and activate the devshell!
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
cd nix-party-tricks && direnv allow
#+end_src

First way done!
** NixOS on AWS three ways
#2: deploy-rs
** NixOS on AWS three ways - #2
#+latex: \tiny
#+begin_src nix
deploy = {
  nodes = {
    "aws" = {
      sshUser = "root";
      sshOpts = [ "-i" "/tmp/nixos-ssh.pem" ];
      hostname = "nixos-aws";
      profiles.hello = {
        path = deploy-rs.lib.x86_64-linux.activate.custom
          nixpkgs.legacyPackages.x86_64-linux.hello "./bin/hello";
      };
      profiles.system = {
        path = deploy-rs.lib.x86_64-linux.activate.nixos
          self.nixosConfigurations.aws;
      };
    };
  };
};
#+end_src
** NixOS on AWS three ways - #2
*** Deploying to hostname, make sure it's in our /etc/hosts
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
sudo echo "{IP}  nixos-aws" >> /etc/hosts
#+end_src
** NixOS on AWS three ways - #2
*** First deploy: "hello world"
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
# the -s skips the checks, saving us some time
# don't do this at home
deploy .#aws.hello -s
#+end_src
** NixOS on AWS three ways - #2
Second deploy: NixOS system running nginx
#+begin_src nix
{
  services.nginx = { enable = true; };
  networking.firewall.allowedTCPPorts = [ 80 ];
}
#+end_src
*** Let's deploy!
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
deploy .#aws.system -s
#+end_src
** NixOS on AWS three ways - #2
*** Now we should get the nginx splash page in a browser
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_example
visit http://nixos-aws in a browser
#+end_example

Second way done!
** NixOS on AWS three ways
 #3: nixos-generators
** NixOS on AWS three ways #3
#+latex: \tiny
#+begin_src nix
packages.x86_64-linux.awsImage = let system = "x86_64-linux";
      in nixos-generators.nixosGenerate {
        pkgs = nixpkgs.legacyPackages.${system};
        modules = [
          # new hostname for new machine
          networking.hostName = "nixos-aws-ami";
          # mostly stuff you've seen before...
            services.nginx = {
              enable = true;
              virtualHosts.${networking.hostName} = {
                # except now we're serving something special
                root = "${self.packages."${system}".default}/www";
              };
            };
        ];
        format = "amazon";
};
#+end_src
** NixOS on AWS three ways - #3
Let's use our shiny new ec2  for this!

*** But before we do, let's make our user creds available for the sake of simplicity.
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+latex: \tiny
#+begin_src shell
# from our local
scp -i /tmp/nixos-ssh.pem ./$(whoami)_accessKeys.csv \
    root@nixos-aws:~/nix-party-tricks/

ssh -i /tmp/nixos-ssh.pem root@nixos-aws
#+end_src
** NixOS on AWS three ways - #3
*** Now let's build the image!
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
cd $PRJ_ROOT/terraform/ami
terraform init
terraform apply
#+end_src

If we're lucky, it will hit the cached version of my image and spare us.

If we're not, I made a trivial change at some point and never cached it, requiring a rebuild.

Declarative build systems are ruthless.
** NixOS on AWS three ways - #3
*** Now we should get something special in a browser
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_example
visit http://nixos-aws-ami in a browser
#+end_example

Third way done!
[[https://live.staticflickr.com/3121/2374568522_0cec8d3f2b_o_d.jpg]]
* Third party trick: nix for managing lambda runtimes
** Preamble
*** We will have to manage some stuff by hand.
:PROPERTIES:
:BEAMER_env: alertblock
:END:
Terraform /really/ doesn't want to manage container images.
Providers that can make it happen expect to build with docker.
** Container image tools
*** Tools we will use in this section
:PROPERTIES:
:BEAMER_env: alertblock
:END:
- docker-tools: nixpkgs native OCI-compatible image builder
- colima: no-fuss container runtimes for macOS and Linux
*** Create ECR repo
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
aws ecr create-repository \
    --repository-name nix
#+end_src
** Lambda One
*** The setup
#+latex: \tiny
#+begin_src nix
let
  pythonEnv = pkgs.python39.withPackages (ps: with ps; [ awslambdaric ]);
  entrypoint = pkgs.writeScriptBin "entrypoint.sh" ''
    #!${pkgs.bash}/bin/bash
    if [ -z "$AWS_LAMBDA_RUNTIME_API" ]; then
      exec ${pkgs.aws-lambda-rie}/bin/aws-lambda-rie ${pythonEnv}/bin/python3 -m awslambdaric $@
    else
      exec ${pythonEnv}/bin/python3 -m awslambdaric $@
    fi
  '';
  app = pkgs.writeScriptBin "app.py" ''
    #!${pythonEnv}/bin/python3

    import sys

    def handler(event, context):
        return "Hello from AWS Lambda using Python" + sys.version + "!"
  '';
in
# ...
#+end_src
** Lambda One (con't)
*** The image
#+latex: \tiny
#+begin_src nix
pkgs.dockerTools.buildLayeredImageWithNixDb {
  name = "nix-lambda";
  tag = "latest";
  contents = [ pkgs.bash pkgs.coreutils pythonEnv app pkgs.aws-lambda-rie ];
  config = {
    Entrypoint = [ "${entrypoint}/bin/entrypoint.sh" ];
    Cmd = [ "app.handler" ];
    WorkingDir = "${app}/bin";
  };
}
#+end_src
** Build and push
*** TODO setup colima?
*** TODO run on build machine??
*** Build the image
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
# starting on the build machine
nix build .#packages.x86-linux.lambdaSimple
# all nix builds get a symlink to ./result by default.
# since this is a raw archived OCI image, we can load the path directly.
docker load < result
#+end_src
** Push the image
*** now tag and push to ECR
#+begin_example
scripts/tag_and_push_lambda.sh
#+end_example
#+latex: \tiny
#+begin_src shell
#! /usr/bin/env nix-shell
#! nix-shell -i bash -p jq

docker tag "$(docker images nix-lambda --format '{{.ID}}')" \
  "$(aws sts get-caller-identity | jq -r '.Account').dkr.ecr.us-east-2.amazonaws.com/nix:latest"
docker push \
  "$(aws sts get-caller-identity | jq -r '.Account').dkr.ecr.us-east-2.amazonaws.com/nix:latest"
#+end_src
** Now terraform the rest
*** More terraform
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src shell
cd $PRJ_ROOT/terraform/lambda
terraform init
terraform apply
#+end_src
